{"version":3,"sources":["components/busSearch/busSearch.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,QAAO,6BAA6B,CAAC,CAAA;AACrC,sCAA4B,iCAAiC,CAAC,CAAA;AAM9D;IAEI,0BAAoB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;IAE1C,CAAC;IAED;;;;OAIG;IACH,mCAAQ,GAAR,UAAS,YAAyB;QAC9B,8CAA8C;QAC9C,IAAI,GAAG,GAAG,6BAA6B,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;aACtD,IAAI,CAAC,UAAS,QAAiB;YAC5B,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAC,EAAE,UAAS,KAAK;YACb,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK;gBACpC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;YAC5E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;YAChD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,sCAAW,GAAnB,UAAoB,GAAa;QAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACK,sCAAW,GAAnB,UAAqB,KAAU;QAC3B,gFAAgF;QAChF,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,IAAI,cAAc,CAAC;QAChD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;;IA7CL;QAAC,iBAAU,EAAE;;wBAAA;IA+Cb,uBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,wBAAgB,mBA8C5B,CAAA","file":"components/busSearch/busSearch.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport \"rxjs/add/operator/toPromise\";\r\nimport {JKMHttpClient} from \"../common/jkmhttpclient.service\";\r\nimport {Response} from \"@angular/http\";\r\nimport {Configuration} from \"../../config/app.constants\";\r\nimport {QuoteRequest} from \"../model/quote.request\";\r\n\r\n@Injectable()\r\nexport class BusSearchService {\r\n\r\n    constructor(private _cdhttp: JKMHttpClient) {\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param loginRequest\r\n     * @returns {Promise<void>|Promise<any|Request>}\r\n     */\r\n    getQuote(quoteRequest:QuoteRequest) {\r\n        // let URL = Configuration.APP_URL + '/quote';\r\n        let URL = \"http://localhost:8080/quote\";\r\n        return this._cdhttp.post(URL, JSON.stringify(quoteRequest))\r\n            .then(function(response:Response) {\r\n                let headers = response.headers;\r\n                return response.json();\r\n            }, function(error) {\r\n                let errMsg = (error._body) ? error._body :\r\n                    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n                console.error(errMsg); // log to console instead\r\n                return Promise.reject(errMsg);\r\n            });\r\n    }\r\n\r\n    private extractData(res: Response) {\r\n        if (res.status < 200 || res.status >= 300) {\r\n            throw new Error('Bad response status: ' + res.status);\r\n        }\r\n        return res.json();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param error\r\n     * @returns {Promise<void>|Promise<T>}\r\n     */\r\n    private handleError (error: any) {\r\n        // In a real world app, we might send the error to remote logging infrastructure\r\n        let errorMsg = JSON.parse(error._body);\r\n        let errMsg = errorMsg.message || 'Server error';\r\n        console.error(errMsg); // log to console instead\r\n        return Promise.reject(errMsg);\r\n    };\r\n\r\n}"],"sourceRoot":"/source/"}