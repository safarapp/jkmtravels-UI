{"version":3,"sources":["components/common/jkmhttpclient.service.ts"],"names":[],"mappings":"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","file":"components/common/jkmhttpclient.service.js","sourcesContent":["\nimport {Injectable} from \"@angular/core\";\nimport {Http, Headers, Response} from \"@angular/http\";\nimport {StorageService} from \"./storage.service\";\nimport \"../../rxjs-extensions\";\n\n\n@Injectable()\nexport class JKMHttpClient {\n\n\n    private ACCESS_TOKEN_HEADER: string = 'Access-Token';\n    private ACCESS_TOKEN_HEADER2: string = 'access-token';\n\n    /**\n     *\n     * @param http\n     * @param _config\n     * @param _mpstorage\n     */\n    constructor( private http:Http,\n                 private _cdstorage:StorageService) {\n    }\n    /**\n     *\n     * @param headers\n     */\n    createAuthorizationHeader(headers:Headers) {\n        console.log(\"Create Authorization Header\");\n        headers.append('Content-Type', 'application/json');\n        headers.append('Accept', 'application/json');\n        headers.append('Authorization', 'Bearer '+this._cdstorage.getSessionStorageData(this.ACCESS_TOKEN_HEADER2));\n    }\n\n    /**\n     *\n     * @param url\n     * @returns {any}\n     */\n    get(url:string) {\n        let headers = new Headers();\n        this.createAuthorizationHeader(headers);\n        url = url +'?t='+Date.now();\n        return new Promise((resolve, reject) => {\n            this.http.get(url, {\n                headers: headers\n            }).toPromise().then(resp=>{\n                resolve(resp);\n            }, err=> {\n                this.handleError(err);\n                reject(err);\n            });\n        });\n    }\n    /**\n     *\n     * @param url\n     * @param options\n     * @returns {any}\n     */\n    getWithOptions(url:string, options:any) {\n        let headers = new Headers();\n        this.createAuthorizationHeader(headers);\n        options.headers = headers;\n        return new Promise( (resolve, reject) => {\n            this.http.get(url,options).toPromise().then( (resp:Response) =>{\n                resolve(resp)\n            }, err=> {\n                this.handleError(err);\n                reject(err)\n            });\n        });\n    }\n    /**\n     *\n     * @param url\n     * @param data\n     * @returns {any}\n     */\n    post(url:string, data:any): Promise<any> {\n        url = url +'?t='+Date.now();\n        let headers = new Headers();\n        this.createAuthorizationHeader(headers);\n        return new Promise( (resolve, reject) => {\n            this.http.post(url, data, {\n                headers: headers\n            }).toPromise().then( (resp:Response) => {\n                this.saveAuthTokenHeader(resp);\n                resolve(resp);\n            }, err=> {\n                this.handleError(err);\n                reject(err);\n            });\n        })\n    }\n\n    /**\n     *\n     * @param url\n     * @param data\n     * @returns {any}\n     */\n    put(url:string, data:any) {\n        url = url +'?t='+Date.now();\n        let headers = new Headers();\n        this.createAuthorizationHeader(headers);\n        return new Promise((resolve, reject) => {\n            this.http.put(url, data, {\n                headers: headers\n            }).toPromise().then( (resp:Response) => {\n                resolve(resp);\n            }, err=> {\n                this.handleError(err);\n                reject(err);\n            });\n        });\n\n    }\n\n    saveAuthTokenHeader(response:Response){\n        let accessToken = response.headers.toJSON()[this.ACCESS_TOKEN_HEADER2];\n        if(!accessToken){\n            accessToken = response.headers.toJSON()[this.ACCESS_TOKEN_HEADER];\n        }\n        if(accessToken){\n            this._cdstorage.setSessionStorage(this.ACCESS_TOKEN_HEADER2, accessToken)\n        }\n    }\n\n    handleError(error:any){\n        console.log(\"Handle error\");\n        if(error && error.headers.toJSON()[this.ACCESS_TOKEN_HEADER]){ //Some error call return access token\n           console.log('error');\n        }else{ //if not reset the current access-token\n            console.log('error');\n        }\n    }\n}"],"sourceRoot":"/source/"}