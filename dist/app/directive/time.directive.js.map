{"version":3,"sources":["directive/time.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAqD,eAAe,CAAC,CAAA;AACrE,sBAAsB,gBAAgB,CAAC,CAAA;AAWvC;IACI,kBAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAEtB,cAAS,GAAwB,IAAI,mBAAY,EAAU,CAAC;IAFnC,CAAC;IAKpC,gCAAa,GAAb,UAAc,KAAS,EAAE,SAAa;QAGlC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;YAEF,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC1B,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACtC,IAAI,QAAQ,GAAG,MAAM,CAAC;YACtB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACpD,CAAC;YACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,GAAG,EAAE,CAAC;YAChB,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAChD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;YAC5D,CAAC;YACD,oBAAoB;YACpB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACjC,CAAC;IAGT,CAAC;IA5BD;QAAC,aAAM,EAAE;;+CAAA;IAZb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;YAC3B,IAAI,EAAE;gBACF,SAAS,EAAG,iBAAiB;gBAC7B,iBAAiB,EAAE,uBAAuB;gBAC1C,qBAAqB,EAAC,0CAA0C;aACnE;SACJ,CAAC;;gBAAA;IAkCF,eAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,gBAAQ,WAgCpB,CAAA","file":"directive/time.directive.js","sourcesContent":["import {Directive, Output, EventEmitter, Input} from '@angular/core';\r\nimport {NgModel} from \"@angular/forms\";\r\n\r\n@Directive({\r\n    selector: '[ngModel][time]',\r\n    host: {\r\n        '(input)' : 'onInputChange()',\r\n        '(ngModelChange)': 'onInputChange($event)',\r\n        '(keydown.backspace)':'onInputChange($event.target.value, true)'\r\n    }\r\n})\r\n\r\nexport class TimeMask {\r\n    constructor(public model:NgModel) {}\r\n\r\n    @Output() rawChange:EventEmitter<string> = new EventEmitter<string>();\r\n   \r\n\r\n    onInputChange(event:any, backspace:any) {\r\n\r\n\r\n        if(event){\r\n\r\n                var length = event.length;\r\n                var newVal = event.replace(/\\D/g, '');\r\n                var rawValue = newVal;\r\n                if (backspace) {\r\n                    newVal = newVal.substring(0, newVal.length - 1);\r\n                }\r\n                if (newVal.length == 0) {\r\n                    newVal = '';\r\n                }\r\n                else if (newVal.length <= 2) {\r\n                    newVal = newVal.replace(/^(\\d{0,2})/, '$1');\r\n                } else if (newVal.length <= 4) {\r\n                    newVal = newVal.replace(/^(\\d{0,2})(\\d{0,2})/, '$1:$2');\r\n                }\r\n                // set the new value\r\n                this.model.valueAccessor.writeValue(newVal);\r\n                this.rawChange.emit(rawValue)\r\n            }\r\n\r\n\r\n    }\r\n}"],"sourceRoot":"/source/"}